#!/usr/bin/env python3 ui/ux 수정 전의 코드입니다. 최종본에는 사용하지 않아 텍스트파일로 전환하였습니다.
"""
개선된 시리얼 통신 처리를 포함한 라인 추적 시스템
"""

import cv2
import numpy as np
import serial
import time
import threading
from picamera2 import Picamera2
from libcamera import controls
from flask import Flask, render_template
from flask_sock import Sock
import base64
import json
import glob

class LineFollower:
    def __init__(self, serial_port=None, baud_rate=9600):
        # 시리얼 포트 자동 검색 및 설정
        self.arduino = None
        self.setup_serial_connection(serial_port, baud_rate)
        
        # 카메라 설정
        self.picam2 = Picamera2()
        config = self.picam2.create_preview_configuration(
            main={"format": "RGB888", "size": (1920, 1080)}
        )
        self.picam2.configure(config)
        self.picam2.set_controls({"AwbMode": controls.AwbModeEnum.Auto})
        self.picam2.start()
        
        # 제어 파라미터
        self.image_center = 1920 // 2
        self.steering_sensitivity = 0.9
        self.base_speed = 1565
        self.max_steering = 2000
        self.backword_speed = 1430
        
        # 라인 검출 파라미터
        self.roi_height = 600
        self.roi_offset = 0
        
        # 제어 상태
        self.running = False
        self.current_steering = 1500
        self.current_speed = 1500
        self.serial_connected = False
        
        # 시리얼 재연결을 위한 파라미터
        self.last_serial_check = time.time()
        self.serial_check_interval = 5.0  # 5초마다 연결 확인
        
        # 웹 스트리밍 설정
        self.app = Flask(__name__)
        self.sock = Sock(self.app)
        self.setup_web_routes()
    
    def find_arduino_ports(self):
        """아두이노가 연결된 시리얼 포트 찾기"""
        possible_ports = []
        
        # Linux에서 일반적인 USB 시리얼 포트들
        port_patterns = [
            '/dev/ttyUSB*',
            '/dev/ttyACM*', 
            '/dev/ttyS*'
        ]
        
        for pattern in port_patterns:
            possible_ports.extend(glob.glob(pattern))
        
        # 포트 정렬
        possible_ports.sort()
        
        print(f"발견된 시리얼 포트: {possible_ports}")
        return possible_ports
    
    def test_serial_port(self, port, baud_rate):
        """시리얼 포트 연결 테스트"""
        try:
            test_serial = serial.Serial(port, baud_rate, timeout=2)
            time.sleep(2)  # 아두이노 부팅 대기
            
            # 테스트 명령 전송
            test_serial.write(b"1500,1500\n")
            test_serial.flush()
            
            # 응답 확인 (선택사항)
            test_serial.close()
            return True
        except Exception as e:
            print(f"포트 {port} 테스트 실패: {e}")
            return False
    
    def setup_serial_connection(self, serial_port, baud_rate):
        """시리얼 연결 설정 (자동 검색 포함)"""
        ports_to_try = []
        
        if serial_port:
            # 지정된 포트가 있으면 우선 시도
            ports_to_try.append(serial_port)
        
        # 자동 검색된 포트들 추가
        ports_to_try.extend(self.find_arduino_ports())
        
        for port in ports_to_try:
            try:
                print(f"시리얼 포트 {port} 연결 시도...")
                if self.test_serial_port(port, baud_rate):
                    self.arduino = serial.Serial(port, baud_rate, timeout=1)
                    time.sleep(2)
                    self.serial_connected = True
                    print(f"Arduino 연결 성공: {port}")
                    return
            except Exception as e:
                print(f"포트 {port} 연결 실패: {e}")
                continue
        
        print("사용 가능한 Arduino를 찾을 수 없습니다.")
        self.serial_connected = False
    
    def reconnect_serial(self):
        """시리얼 연결 재시도"""
        if self.arduino:
            try:
                self.arduino.close()
            except:
                pass
            self.arduino = None
        
        print("시리얼 연결 재시도...")
        self.setup_serial_connection(None, 9600)
    
    def check_serial_connection(self):
        """시리얼 연결 상태 확인 및 재연결"""
        current_time = time.time()
        if current_time - self.last_serial_check > self.serial_check_interval:
            self.last_serial_check = current_time
            
            if not self.serial_connected or not self.arduino or not self.arduino.is_open:
                self.reconnect_serial()
    
    def send_control_signal(self, speed_pwm, steering_pwm):
        """개선된 아두이노 제어 신호 전송"""
        self.check_serial_connection()
        
        if self.arduino and self.arduino.is_open and self.serial_connected:
            try:
                command = f"{speed_pwm},{steering_pwm}\n"
                self.arduino.write(command.encode())
                self.arduino.flush()
                
                # 연결 상태 확인을 위해 간단한 읽기 시도
                if self.arduino.in_waiting > 0:
                    self.arduino.read(self.arduino.in_waiting)
                    
            except serial.SerialException as e:
                print(f"시리얼 통신 오류: {e}")
                self.serial_connected = False
                # 연결 오류 시 즉시 재연결 시도
                self.reconnect_serial()
            except Exception as e:
                print(f"기타 통신 오류: {e}")
                self.serial_connected = False
        else:
            print("시리얼 연결이 끊어져 있습니다.")
    
    def setup_web_routes(self):
        """웹 라우트 설정"""
        @self.app.route('/')
        def index():
            return render_template('index.html')
        
        @self.sock.route('/ws')
        def webcam_ws(ws):
            try:
                while True:
                    frame = self.get_processed_frame()
                    ok, buf = cv2.imencode('.jpg', frame)
                    if not ok:
                        continue
                    jpg_b64 = base64.b64encode(buf).decode()
                    
                    data = {
                        'image': jpg_b64,
                        'steering': self.current_steering,
                        'speed': self.current_speed,
                        'running': self.running,
                        'serial_connected': self.serial_connected
                    }
                    ws.send(json.dumps(data))
                    time.sleep(0.03)
            except Exception as e:
                print("WebSocket 연결 종료:", e)
    
    def detect_line(self, frame):
        """검정색 라인 검출"""
        gray = cv2.cvtColor(frame, cv2.COLOR_RGB2GRAY)
        
        height, width = gray.shape
        roi_y_start = height - self.roi_height - self.roi_offset
        roi_y_end = height - self.roi_offset
        roi = gray[roi_y_start:roi_y_end, :]
        
        blurred = cv2.GaussianBlur(roi, (5, 5), 0)
        _, binary = cv2.threshold(blurred, 180, 255, cv2.THRESH_BINARY_INV)
        
        kernel = np.ones((3, 3), np.uint8)
        binary = cv2.morphologyEx(binary, cv2.MORPH_OPEN, kernel)
        binary = cv2.morphologyEx(binary, cv2.MORPH_CLOSE, kernel)
        
        contours, _ = cv2.findContours(binary, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        
        line_center = None
        if contours:
            largest_contour = max(contours, key=cv2.contourArea)
            if cv2.contourArea(largest_contour) > 800:
                M = cv2.moments(largest_contour)
                if M['m00'] != 0:
                    cx = int(M['m10'] / M['m00'])
                    line_center = cx
            else:
                line_center = None
        
        return binary, line_center, roi_y_start
    
    def calculate_steering(self, line_center):
        """라인 중심에 따른 조향각 계산"""
        if line_center is None:
            return 1500
        
        error = self.image_center - line_center
        steering_adjustment = int(error * self.steering_sensitivity)
        steering_adjustment = max(-self.max_steering, min(self.max_steering, steering_adjustment))
        steering_pwm = 1500 + steering_adjustment
        
        return max(1000, min(2000, steering_pwm))
    
    def get_processed_frame(self):
        """처리된 프레임 반환 (웹 스트리밍용)"""
        frame = self.picam2.capture_array()
        binary, line_center, roi_y_start = self.detect_line(frame)
        
        overlay = frame.copy()
        height, width = frame.shape[:2]
        roi_y_end = height - self.roi_offset
        
        cv2.rectangle(overlay, (0, roi_y_start), (width, roi_y_end), (0, 255, 0), 2)
        cv2.line(overlay, (self.image_center, 0), (self.image_center, height), (255, 0, 0), 2)
        
        if line_center is not None:
            cv2.circle(overlay, (line_center, roi_y_start + self.roi_height//2), 10, (0, 0, 255), -1)
            cv2.line(overlay, (line_center, roi_y_start), (line_center, roi_y_end), (0, 0, 255), 2)
        
        binary_color = cv2.cvtColor(binary, cv2.COLOR_GRAY2RGB)
        overlay[roi_y_start:roi_y_start+binary.shape[0], :binary.shape[1]] = binary_color
        
        # 연결 상태 표시 추가
        connection_status = "Connected" if self.serial_connected else "Disconnected"
        status_color = (0, 255, 0) if self.serial_connected else (0, 0, 255)
        
        cv2.putText(overlay, f"Speed: {self.current_speed}", (10, 30), 
                   cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 255, 255), 2)
        cv2.putText(overlay, f"Steering: {self.current_steering}", (10, 60), 
                   cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 255, 255), 2)
        cv2.putText(overlay, f"Running: {self.running}", (10, 90), 
                   cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 255, 255), 2)
        cv2.putText(overlay, f"Serial: {connection_status}", (10, 120), 
                   cv2.FONT_HERSHEY_SIMPLEX, 0.7, status_color, 2)
        
        return overlay
    
    def autonomous_drive(self):
        """자율주행 메인 루프"""
        print("자율주행 시작")
        self.running = True
        
        while self.running:
            try:
                frame = self.picam2.capture_array()
                binary, line_center, _ = self.detect_line(frame)
                steering_pwm = self.calculate_steering(line_center)
                
                if line_center is not None:
                    speed_pwm = self.base_speed
                else:
                    speed_pwm =  self.backword_speed
                
                self.current_speed = speed_pwm
                self.current_steering = steering_pwm
                self.send_control_signal(speed_pwm, steering_pwm)
                
                if line_center is not None:
                    status = f"라인 중심: {line_center}, 조향: {steering_pwm}, 속도: {speed_pwm}"
                    if self.serial_connected:
                        status += " [연결됨]"
                    else:
                        status += " [연결끊김]"
                    print(status)
                else:
                    print("라인 검출되지 않음")
                
                time.sleep(0.05)
                
            except KeyboardInterrupt:
                print("자율주행 중단")
                break
            except Exception as e:
                print(f"자율주행 오류: {e}")
                time.sleep(0.1)
        
        self.stop()
    
    def start(self):
        """자율주행 시작"""
        if not self.running:
            self.drive_thread = threading.Thread(target=self.autonomous_drive)
            self.drive_thread.daemon = True
            self.drive_thread.start()
    
    def stop(self):
        """자율주행 정지"""
        print("자율주행 정지")
        self.running = False
        self.current_speed = 1500
        self.current_steering = 1500
        self.send_control_signal(1500, 1500)
    
    def run_web_server(self):
        """웹 서버 실행"""
        self.app.run(host='0.0.0.0', port=5000, debug=False)
    
    def cleanup(self):
        """리소스 정리"""
        self.stop()
        if self.arduino:
            self.arduino.close()
        self.picam2.stop()

def main():
    line_follower = LineFollower()
    
    try:
        print("라인 추적 시스템 시작")
        print("웹 브라우저에서 http://라즈베리파이IP:5000 접속")
        print("자율주행 시작: 's' 키")
        print("자율주행 정지: 'q' 키")
        print("시리얼 재연결: 'r' 키")
        
        web_thread = threading.Thread(target=line_follower.run_web_server)
        web_thread.daemon = True
        web_thread.start()
        
        while True:
            command = input("명령 입력 (s: 시작, q: 종료, r: 재연결): ").strip().lower()
            
            if command == 's':
                line_follower.start()
            elif command == 'r':
                line_follower.reconnect_serial()
            elif command == 'q':
                break
            else:
                print("알 수 없는 명령입니다.")
    
    except KeyboardInterrupt:
        print("프로그램 중단")
    finally:
        line_follower.cleanup()

if __name__ == '__main__':
    main()
